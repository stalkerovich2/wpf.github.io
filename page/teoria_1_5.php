<!DOCTYPE html>
<html>
<head>
<meta http-equiv="content1-type" content1="text/html; charset=windows-1251" /> 
<meta http-equiv="content1-type" content1="text/html; charset=utf8" />
<link href= "../css/style.css" rel="stylesheet">
<title>Главная</title>
    </head>
<body>
		<?php require("../inc/head.inc");?>
		<?php require("../inc/hleb.inc");?>
<table	class="table_verst">
    <tr>		
		<td class="menu">		
	<?php require("../inc/left_meny.inc");?>
			</td>
        <td class="content1">
		<div  class="zaglav">WPF Элементы дерева</div>
<p>
Есть много технологий, где элементы и компоненты упорядочены в виде древовидной структуры, так что программисты могут легко обрабатывать объект и изменить поведение приложения. Windows Presentation Foundation (WPF) имеет комплексную структуру дерева в виде объектов. В WPF есть два способа, которые концептуализировали полное дерево объектов:
</p>
<ul id="spisok">
	<li>
	Логическая структура дерева;
	</li>
	<li>
	Визуальная структура дерева.
	</li>
</ul>
<p>С помощью этих древовидных структур, вы можете легко создать и определить взаимосвязь между элементами пользовательского интерфейса. В основном, разработчики и дизайнеры WPF либо использовать процедурный язык для создания приложения или создать часть пользовательского интерфейса приложения в XAML имея в виду структуру дерева объектов.</p>
<h1>Логическая структура дерева</h1>
<p>В приложениях WPF, структура элементов пользовательского интерфейса в XAML представляет собой логическую структуру дерева. В XAML основные элементы пользовательского интерфейса объявляются разработчиком. Логическое дерево в WPF определяет следующее:</p>
<ul id="spisok">
	<li>
	свойства зависимостей;
	</li>
	<li>
	Статические и динамические ресурсы;
	</li>
	<li>
	Статические и динамические ресурсы;
	</li>
	<li>
	Связывание элементов на его имени и т.д.
	</li>
</ul>
<p>Давайте посмотрим на следующем примере, в котором создаются кнопки и окно списка.</p>
<div class="kodx">
<pre>
&lt;Window x:Class = "WPFElementsTree.MainWindow" 
xmlns = "http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
xmlns:x = "http://schemas.microsoft.com/winfx/2006/xaml"
Title = "MainWindow" Height = "350" Width = "604"> 
&lt;StackPanel&gt;
&lt;Button x:Name = "button" Height = "30" Width = "70" Content = "OK" Margin = "20" /&gt;		
&lt;ListBox x:Name = "listBox" Height = "100" Width = "100" Margin = "20"&gt; 
&lt;ListBoxItem Content = "Item 1" /&gt; 
&lt;ListBoxItem Content = "Item 2" /&gt; 
&lt;ListBoxItem Content = "Item 3" /&gt; 
&lt;/ListBox&gt; 	
&lt;/StackPanel&gt; 	
&lt;/Window&gt; 
</pre>
</div>
<p>Если вы посмотрите на код XAML, вы будете наблюдать структуру дерева, т.е. корневой узел является окном, так и внутри корневого узла, есть только один ребенок, то есть StackPanel. Но StackPanel содержит два дочерних элемента, кнопки и окно списка. Список коробка имеет еще три списка дочерних элементов окна.</p>
<h1>Визуальная структура дерева</h1>
<p>В WPF, концепция визуального дерева описывает структуру визуальных объектов, как представлено базовым классом Visual Basic. Это означает все элементы пользовательского интерфейса, которые предоставляются на экране вывода.</p>
<p>Когда программист хочет создать шаблон для конкретного элемента управления, он на самом деле визуализации визуальное дерево этого элемента управления. Визуальное дерево также очень полезно для тех, кто хочет привлечь более низкие регуляторы уровня для повышения производительности и оптимизации.</p>
<p>В приложениях WPF, визуальное дерево используется для:</p>
<ul id="spisok">
	<li>
	Оказание визуальных объектов;
	</li>
	<li>
	предоставление макетов;
	</li>
	<li>
	маршрутизируемый события в основном путешествуют по визуальному дереву, а не логическое дерево.
	</li>
</ul>
Чтобы увидеть визуальное дерево указанного выше простого приложения, которое содержит кнопку и поле со списком, скомпилируйте и выполните код XAML, и вы увидите следующее окно.
<div id="statya">
	<h3 id="r1">Рис. 1 Скомпелированное приложение</h3>
   <img id="img" src="../img/r1_1_5.jpg">
</div>
<p>Когда приложение запущено, вы можете увидеть визуальное дерево запущенного приложения в окне живого дерева визуалов, который показывает полную иерархию этого приложения, как показано ниже.</p>
<div id="statya">
	<h3 id="r1">Рис. 1 Визуальное дерево приложения</h3>
   <img id="img" src="../img/r1_1_6.jpg">
</div>
<p>Визуальное дерево обычно супермножеством логического дерева. Здесь можно увидеть, что все логические элементы также присутствуют в визуальном дереве. Таким образом, эти два дерева действительно только две различные точки зрения одного и того же набора объектов, которые составляют UI.</p>
<ul id="spisok">
	<li>
	Логическое дерево уходит из большого количества деталей, позволяя вам сосредоточиться на основной структуре пользовательского интерфейса и игнорировать детали, как именно она была представлена;
	</li>
	<li>
	Логическое дерево является то, что вы используете для создания базовой структуры пользовательского интерфейса;
	</li>
	<li>
	Визуальное дерево будет представлять интерес, если вы фокусируетесь на презентации. Например, если вы хотите, чтобы настроить внешний вид любого элемента пользовательского интерфейса, вам нужно будет использовать визуальное дерево.
	</li>
</ul>
	</td>
    </tr>	
</table>


</body>
</html>